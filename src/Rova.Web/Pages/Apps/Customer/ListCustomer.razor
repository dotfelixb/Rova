@page "/app/customers"
@using Rova.Model.Domain
@inject ILogger<NewCustomer> Logger
@inject Rova.Core.Services.CustomerService CustomerService
@inject NavigationManager NavigationManager

<PageTitle>List Customers</PageTitle>

<PageView>
    <Title></Title>
    <Toolbar>
        <div class="px-1">
            <MenuButton>
                <MenuButtonItem Text="Print" LeadingIconClass="gg-printer" />
                <MenuButtonItem Text="Report" LeadingIconClass="gg-file" />
                <MenuButtonItem Text="DashBoard" leadingIconClass="gg-board" />
            </MenuButton>
        </div>
        <div>
            <LinkButton To="/app/customers/new" Title="New Customer" ButtonType="primary" LeadingIconClass="gg-math-plus"></LinkButton>
        </div>
    </Toolbar>
    <SideView>
        <div>
            <div class="pb-3">
                <span class="cursor-default uppercase text-xs font-semibold text-gray-500">
                    Customers
                </span>
            </div>
        </div>
    </SideView>
    <Content>
        <ListView TItem="Customer" Columns="@Columns" DataSource="@Customers"></ListView>
    </Content>
</PageView>

@code {
    public Dictionary<string, Dictionary<string, string>> Columns = new()
    {
            {
                "Code",
                new()
                {
                    { "display", "Code" },
                    { "type", "link" },
                    { "format", "/app/customers/{0}" }
                }
            },
            {
                "DisplayName",
                new()
                {
                    { "display", "Name" }
                }
            },
            {
                "CustomerType",
                new()
                {
                    { "display", "Type" }
                }
            },
            {
                "CreatedAt",
                new()
                {
                    { "display", "Created Date" },
                    { "type", "date" },
                    { "format", "MMM dd, yyyy" }
                }
            }
        };

    public IEnumerable<Customer> Customers { get; set; } = Enumerable.Empty<Customer>();

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Fetching Customers");

        var result = await CustomerService.ListCustomer();

        if (result.Ok)
        {
            Customers = result.Data;
        }

        Logger.LogInformation("Fetching Customers complete with status [{0}]", result.Ok ? "Success" : "Failed");
    }

}